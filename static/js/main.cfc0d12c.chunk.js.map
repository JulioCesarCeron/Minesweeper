{"version":3,"sources":["assets/bomb-explosion.svg","AppStyle.js","components/ItemStyle.js","components/Item.js","utils/initGrid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","styled","div","Container","Row","ItemSquare","props","isBomb","ImgBomb","img","Item","onTouchField","indexLine","indexColumn","item","bombImg","src","bomb","alt","activeBombStyle","active","onClick","generateLine","size","maxBombs","parseInt","countBombs","line","index","Math","floor","random","push","App","useState","matrix","initGrid","grid","setGrid","setName","blow","setBlow","touchField","x","y","modifyGrid","forEach","theme","style","marginTop","map","key","id","generate","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,4C,opBCEpC,IAAMC,EAAUC,IAAOC,IAAV,KAQPC,EAAYF,IAAOC,IAAV,KAKTE,EAAMH,IAAOC,IAAV,K,8ZCbT,IAAMG,EAAaJ,IAAOC,IAAV,IAKP,SAAAI,GAAK,OAAIA,EAAMC,OAAS,UAAY,WAOlC,SAAAD,GAAK,OAAIA,EAAMC,OAAS,UAAY,YAIzCC,EAAUP,IAAOQ,IAAV,K,iBCdL,SAASC,EAAT,GAA+D,IAA/CC,EAA8C,EAA9CA,aAAcC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KAC7DC,EAAU,kBAACP,EAAD,CAASQ,IAAKC,IAAMC,IAAI,SAClCX,EAAuB,IAAdO,EAAKG,KACdE,EAAkBZ,GAA0B,IAAhBO,EAAKM,OACvC,OACE,kBAACf,EAAD,CACEgB,QAAS,kBAAMV,EAAaC,EAAWC,IACvCN,OAAQY,GAES,IAAhBL,EAAKM,SAAiBb,EAASQ,EAAUD,EAAKG,OCbrD,SAASK,EAAaC,GAKpB,IAJA,IAAMC,EAAWC,SAAiB,GAAPF,EAAa,IAAK,IACzCG,EAAa,EACbC,EAAO,GAEFC,EAAQ,EAAGA,EAAQL,EAAMK,IAAS,CACzC,IAAMX,EAAOS,GAAcF,EAAWK,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAC7D,IAATd,IAAeS,GAAc,GAC7BC,EAAKK,KAAK,CAAEf,OAAMG,OAAQ,IAG5B,OAAOO,EC4CMM,MA/Cf,WAAgB,IAAD,EACWC,mBDKnB,SAAkBX,GAGvB,IAFA,IAAIY,EAAS,GAEJP,EAAQ,EAAGA,EAAQL,EAAMK,IAChCO,EAAOH,KAAKV,EAAaC,IAG3B,OAAOY,ECZ0BC,CAAS,KAD7B,mBACNC,EADM,KACAC,EADA,OAEWJ,mBAAS,IAFpB,mBAEAK,GAFA,aAGWL,oBAAS,GAHpB,mBAGNM,EAHM,KAGAC,EAHA,KAMPC,EAAa,SAACC,EAAGC,GACrB,IAAMC,EAAaR,EACW,IAA1BQ,EAAWF,GAAGC,GAAG3B,OACnB4B,EAAWC,QAAQ,SAAAnB,GACjBA,EAAKmB,QAAQ,SAAAhC,GACM,IAAdA,EAAKG,OACNH,EAAKM,OAAS,OAIpBqB,GAAQ,IAEVI,EAAWF,GAAGC,GAAGxB,OAAS,EAC1BkB,EAAQO,GACRN,EAAQ,GAAD,OAAII,EAAJ,YAASC,KAGlB,OACE,kBAAC,IAAD,CAAeG,MAAO,IACpB,kBAAC/C,EAAD,KACGwC,GAAQ,wBAAIQ,MAAO,CAAEC,UAAW,IAAxB,eACT,kBAAC9C,EAAD,KACGkC,EAAKa,IAAI,SAACvB,EAAMf,GAAP,OACR,kBAACR,EAAD,CAAK+C,IAAKC,IAAGC,YACV1B,EAAKuB,IAAI,SAACpC,EAAMD,GAAP,OACR,kBAACH,EAAD,CACEyC,IAAKC,IAAGC,WACRzC,UAAWA,EACXC,YAAaA,EACbC,KAAMA,EACNH,aAAc+B,aChCZY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cfc0d12c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bomb-explosion.a4ec3fa6.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const Container = styled.div`\n  margin: 0 auto;\n  text-align: center;\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  color: #fff;\n  background: #333;\n  height: 30px;\n  padding: 1px;\n`;","import styled from 'styled-components';\n\nexport const ItemSquare = styled.div`\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  color: #fff;\n  background: ${props => props.isBomb ? '#9e2828' : '#1d1f27'};\n  width: 30px;\n  height: 30px;\n  margin: 0 1px;\n  justify-content: center;\n  font-size: 14px;\n  :hover {\n    background: ${props => props.isBomb ? '#9e2828' : '#22242d'};\n  }\n`;\n\nexport const ImgBomb = styled.img`\n  height: 30px;\n  width: 30px;\n`;","import React from \"react\";\nimport { ItemSquare, ImgBomb} from \"./ItemStyle\";\nimport bomb from \"../assets/bomb-explosion.svg\";\n\nexport default function Item({ onTouchField, indexLine, indexColumn, item }) {\n  const bombImg = <ImgBomb src={bomb} alt='bomb' />;\n  const isBomb = item.bomb === 1;\n  const activeBombStyle = isBomb && item.active === 1;\n  return (\n    <ItemSquare\n      onClick={() => onTouchField(indexLine, indexColumn)}\n      isBomb={activeBombStyle}\n    >\n      {item.active === 1 && (isBomb ? bombImg : item.bomb)}\n    </ItemSquare>\n  );\n}\n","function generateLine(size) {\n  const maxBombs = parseInt((size * 30) / 100, 10);\n  let countBombs = 0;\n  let line = [];\n\n  for (let index = 0; index < size; index++) {\n    const bomb = countBombs <= maxBombs ? Math.floor(Math.random() * 2) : 0;\n    bomb === 1 && (countBombs += 1);\n    line.push({ bomb, active: 0 });\n  }\n\n  return line;\n}\n\nexport function initGrid(size) {\n  let matrix = [];\n\n  for (let index = 0; index < size; index++) {\n    matrix.push(generateLine(size));\n  }\n\n  return matrix;\n}\n","import React, { useState, useEffect } from \"react\";\nimport id from \"shortid\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport { Row, Container, Wrapper } from \"./AppStyle\";\nimport Item from \"./components/Item\";\nimport { initGrid } from \"./utils/initGrid\";\n\nfunction App() {\n  const [grid, setGrid] = useState(initGrid(10));\n  const [name, setName] = useState('');\n  const [blow, setBlow] = useState(false);\n  \n\n  const touchField = (x, y) => {\n    const modifyGrid = grid;\n    if (modifyGrid[x][y].bomb === 1) {\n      modifyGrid.forEach(line => {\n        line.forEach(item => {\n          if(item.bomb === 1) {\n            item.active = 1;\n          }\n        })\n      });\n      setBlow(true);\n    }\n    modifyGrid[x][y].active = 1;\n    setGrid(modifyGrid);\n    setName(`${x}-${y}`);\n  }\n\n  return (\n    <ThemeProvider theme={{}}>\n      <Wrapper>\n        {blow && <h3 style={{ marginTop: 0 }} >Fim do Jogo</h3>}\n        <Container>\n          {grid.map((line, indexLine) => (\n            <Row key={id.generate()}>\n              {line.map((item, indexColumn) => (\n                <Item\n                  key={id.generate()}\n                  indexLine={indexLine}\n                  indexColumn={indexColumn}\n                  item={item}\n                  onTouchField={touchField}\n                />\n              ))}\n            </Row>\n          ))}\n        </Container>\n      </Wrapper>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}