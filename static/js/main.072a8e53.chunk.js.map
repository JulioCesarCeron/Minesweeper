{"version":3,"sources":["assets/bomb-explosion.svg","components/Item/Item.js","models/Cell.ts","util/cosntants.js","models/Board.ts","components/Minesweeper/Minesweeper.js","App.js","index.js"],"names":["module","exports","Item","onTouchField","indexLine","indexColumn","item","bombImg","className","src","bomb","height","width","alt","isBomb","mine","isClear","status","classesNames","onClick","proximityMines","active","Cell","row","column","PEERS","Board","size","mines","cells","remainingCells","mineCount","y","this","x","i","getRandomCell","adjacentMines","peer","Math","floor","random","length","Minesweeper","useState","blow","boardField","setBoardField","console","log","checkCell","cell","handlerCells","showAllBombs","touchField","checkValue","alert","style","marginTop","map","line","key","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.072a8e53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bomb-explosion.a4ec3fa6.svg\";","import React from \"react\";\nimport classesNames from 'classnames';\n\nimport bomb from \"../../assets/bomb-explosion.svg\";\nimport './item.modules.css'; \n\n\nconst Item = ({\n\tonTouchField,\n\tindexLine,\n\tindexColumn,\n\titem,\n}) => {\n  const bombImg = <img className=\"img\" src={bomb} height=\"35px\" width=\"35px\" alt='bomb' />;\n\tconst isBomb = item.mine;\n\tconst isClear = item.status === 'clear';\n\n  return (\n    <div\n\t\t\tclassName={classesNames('item', {\n\t\t\t\t'item-clear': isClear,\n\t\t\t\t'item-hidden': !isClear,\n\t\t\t\t'item-bomb': (isClear && isBomb)\n\t\t\t})}\n      onClick={() => onTouchField(indexLine, indexColumn)}\n    >\n\n\t\t\t{isClear && (\n\t\t\t\t<>\n\t\t\t\t\t{item.mine ? (\n\t\t\t\t\t\tbombImg\n\t\t\t\t\t) : (\n\t\t\t\t\t\titem.proximityMines === 0 ? '' : item.proximityMines\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t)}\n      {item.active === 1 && (isBomb ? bombImg : item.bomb)}\n    </div>\n  );\n}\n\nexport default Item;","export class Cell {\n\tstatus: 'open' | 'clear' | 'flag' = 'open';\n\tmine = false;\n\tproximityMines = 0;\n\n\tconstructor(public row: number, public column: number){}\n}","export const PEERS = [\n\t[-1, -1],\n\t[-1, 0],\n\t[-1, 1],\n\t[0, -1],\n\t[0, 1],\n\t[1, -1],\n\t[1, 0],\n\t[1, 1],\n];","import { Cell } from \"./Cell\";\nimport { PEERS } from \"../util/cosntants\";\n\nexport class Board {\n\tcells: Cell[][] = [];\n\n\tpublic remainingCells = 0;\n\tpublic mineCount = 0;\n\n\tconstructor(size: number, mines: number) {\n\t\tfor (let y = 0; y < size; y++) {\n\t\t\tthis.cells[y] = [];\n\t\t\tfor (let x = 0; x < size; x++) {\n\t\t\t\tthis.cells[y][x] = new Cell(y, x);\n\t\t\t}\n\t\t}\n\n\t\t// Assign mines\n\t\tfor (let i = 0; i < mines; i++) {\n\t\t\tthis.getRandomCell().mine = true\n\t\t}\n\n\t\t// Count mines\n\t\tfor (let y = 0; y < size; y++) {\n\t\t\tfor (let x = 0; x < size; x++) {\n\t\t\t\tlet adjacentMines = 0;\n\t\t\t\tfor (let peer of PEERS) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.cells[y+peer[0]]\n\t\t\t\t\t\t&& this.cells[y+peer[0]][x+peer[1]]\n\t\t\t\t\t\t&& this.cells[y+peer[0]][x+peer[1]].mine\n\t\t\t\t\t) {\n\t\t\t\t\t\tadjacentMines++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.cells[y][x].proximityMines = adjacentMines;\n\n\t\t\t\tif (this.cells[y][x].mine) {\n\t\t\t\t\tthis.mineCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.remainingCells = (size * size) - this.mineCount\n\t}\n\n\tgetRandomCell(): Cell {\n\t\tconst y = Math.floor(Math.random() * this.cells.length);\n\t\tconst x = Math.floor(Math.random() * this.cells[y].length);\n\t\treturn this.cells[y][x];\n\t}\n}","import React, { useState } from 'react';\n\nimport './Minesweeper.modules.css';\nimport Item from '../Item/Item';\nimport { Board } from '../../models/Board';\nimport { PEERS } from '../../util/cosntants';\n\n\nconst Minesweeper = () => {\n\tconst [blow] = useState(false);\n\tconst [boardField, setBoardField] = useState(new Board(10, 10));\n\tconsole.log('boardField', boardField);\n\tlet { remainingCells } = boardField;\n\n\tconst restart = () => {\n\t\tsetBoardField(new Board(10, 15));\n\t}\n\n\tconst showAllBombs = () => {\n\t\tconst handlerCells = boardField.cells;\n\t\tfor (const row of handlerCells) {\n\t\t\tfor (const cell of row) {\n\t\t\t\tif (cell.status === 'open') {\n\t\t\t\t\tcell.status = 'clear';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsetBoardField({\n\t\t\t...boardField,\n\t\t\tcells: handlerCells\n\t\t});\n\t}\n\n\tconst checkCell = (y, x) => {\n\t\tconst { cells } = boardField;\n\t\tconst cell = cells[y][x];\n\t\t\n\t\tif (cell.status !== 'open'){\n\t\t\treturn null;\n\t\t} else if (cell.mine) {\n\t\t\tshowAllBombs();\n\t\t\treturn 'gameover'\n\t\t} else {\n\t\t\tremainingCells -= 1;\n\t\t\tcells[y][x].status = 'clear'\n\n\t\t\t// Empty cell, let's clear the whole block.\n\t\t\tif (cell.proximityMines === 0) {\n\t\t\t\tfor (let peer of PEERS) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tcells[cell.row+peer[0]] &&\n\t\t\t\t\t\tcells[cell.row+peer[0]][cell.column+peer[1]]\n\t\t\t\t\t) {\n\t\t\t\t\t\tcheckCell((cell.row + peer[0]), (cell.column + peer[1]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsetBoardField({\n\t\t\t\t...boardField,\n\t\t\t\tremainingCells,\n\t\t\t\tcells\n\t\t\t});\n\n\t\t\tif (remainingCells === 0) {\n\t\t\t\treturn 'win';\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t}\n\n  const touchField = (y, x) => {\n\t\tconst checkValue = checkCell(y, x); \n\t\t\n\t\tif (checkValue === 'gameover') {\n\t\t\talert('Game Over =(')\n\t\t};\n\n\t\tif (checkValue === 'win') {\n\t\t\talert('You Win =)')\n\t\t};\n\t}\n\n  return (\n\t\t<div className=\"wrapper\">\n\t\t\t{blow && <h3 style={{ marginTop: 0 }} >Fim do Jogo</h3>}\n\t\t\t<div className=\"container\">\n\t\t\t\t{boardField.cells.map((line, y) =>  (\n\t\t\t\t\t\t<div className=\"row\" key={`y-${y}`}>\n\t\t\t\t\t\t\t{line.map((item, x) => (\n\t\t\t\t\t\t\t\t<Item\n\t\t\t\t\t\t\t\t\tkey={`y-${y}-x-${x}`}\n\t\t\t\t\t\t\t\t\tindexLine={y}\n\t\t\t\t\t\t\t\t\tindexColumn={x}\n\t\t\t\t\t\t\t\t\titem={item}\n\t\t\t\t\t\t\t\t\tonTouchField={touchField}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t\t<button onClick={() => restart()} >restart</button>\n\t\t\t</div>\n\t\t</div>\n  );\n};\n\nexport default Minesweeper;","import React from \"react\";\n\nimport Minesweeper from \"./components/Minesweeper/Minesweeper\";\n\n\nfunction App() {\n\treturn <Minesweeper />\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.modules.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}